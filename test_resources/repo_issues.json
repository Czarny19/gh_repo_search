[
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1784",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1784/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1784/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1784/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1784",
    "id": 2914593430,
    "node_id": "I_kwDOAAGfRs6tuSqW",
    "number": 1784,
    "title": "Verifier and similar rules should validate if MultipleFailureException is thrown",
    "user": {
      "login": "Ambeco",
      "id": 872032,
      "node_id": "MDQ6VXNlcjg3MjAzMg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/872032?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ambeco",
      "html_url": "https://github.com/Ambeco",
      "followers_url": "https://api.github.com/users/Ambeco/followers",
      "following_url": "https://api.github.com/users/Ambeco/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ambeco/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ambeco/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ambeco/subscriptions",
      "organizations_url": "https://api.github.com/users/Ambeco/orgs",
      "repos_url": "https://api.github.com/users/Ambeco/repos",
      "events_url": "https://api.github.com/users/Ambeco/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ambeco/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2025-03-12T16:53:33Z",
    "updated_at": "2025-03-17T21:09:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "ErrorCollector and MultipleFailureException are incredibly useful tools, but feel only half integrated into Junit. ExternalResource and TestWatcher both execute their functionality even if the test throws an exception, and if that functionality itself throws, then these accumulate the multiple exceptions into a MultipleFailureException.  However, Verifier (and thus, almost all rules that extend it), does NOT run if the test throws a MultipleFailureException, which is a missed opportunity. This is especially ironic since ErrorCollector itself extends Verifier, so if a test has multiple ErrorCollector rules for any reason (inheritance or toolchain RuleChains), then only the innermost ErrorCollector collects errors. ErrorCollector and Verifier ought to work nicely together.\n\nVerifier ought to wrap its `base.evaluate();` call in a try/catch, and if it catches a MultipleFailureException, then it ought to execute .verify().  It should accumulate the MultipleFailureException exceptions and any new exception(s?) thrown by  .verify(), and throw those as a new MultipleFailureException.  \n\nWe could consider catching all exceptions and running .verify() and rethrowing the original exception afterward, but for tests failing with non-MultipleFailureException, running post-test-verification almost certainly doesn't make sense. It would virtually always fail, providing noise instead of value, so I do not propose executing it for any exception other than MultipleFailureException. It is worth noting that this reasoning only really applies to exceptions thrown from the test method itself, so ideally we *do* want to run post-test-verification if inner Rules' tear-downs throw exceptions, but usefully, existing JUnit rules _only_ throw MultipleFailureException in teardown, so no additional work is needed.\n\nI haven't yet examined the junit-5 code to see (A)  this has already been fixed, (B) 5 has new class/method names, or (C) if 5 rules now throw exceptions besides MultipleFailureException in teardown. I understand and accept that no new junit-4 releases are planned, and that if this feature is accepted, then the changes will probably only be implemented in junit-5.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1784/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1784/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1782",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1782/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1782/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1782/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1782",
    "id": 2812144054,
    "node_id": "I_kwDOAAGfRs6nnem2",
    "number": 1782,
    "title": "Update TestSuite class to report test-failure with correct class/method name instead of 'warning(junit.framework.TestSuite)'",
    "user": {
      "login": "kishoretak",
      "id": 57614405,
      "node_id": "MDQ6VXNlcjU3NjE0NDA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/57614405?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kishoretak",
      "html_url": "https://github.com/kishoretak",
      "followers_url": "https://api.github.com/users/kishoretak/followers",
      "following_url": "https://api.github.com/users/kishoretak/following{/other_user}",
      "gists_url": "https://api.github.com/users/kishoretak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kishoretak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kishoretak/subscriptions",
      "organizations_url": "https://api.github.com/users/kishoretak/orgs",
      "repos_url": "https://api.github.com/users/kishoretak/repos",
      "events_url": "https://api.github.com/users/kishoretak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kishoretak/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2025-01-27T05:55:35Z",
    "updated_at": "2025-01-30T08:28:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "The framework reports the test-class constructor initialisation with a hardcoded  method name _warning_  and class-name as _TestSuite_ class and ignore the actual method name and class-name. \nWhile its somewhat easy to find the issue locally when there are a few test-failure but in-case of CI pipeline where thousands of test are running and we rely on XML report, its not possible to differentiate between such test-failures and auto-assign to test-class owner as test-class itself is missing.\nThe class does optimise when the non parameterised constructor is failing by reporting a single test-failure instead of reporting all the test-methods with same error and there is might still be okay to keep a dummy test-name, however it should use the correct class-name.\nAnd incase of non default constructor failure, it should report with correct test-name as well along with test-class name.\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1782/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1782/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1779",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1779/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1779/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1779/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1779",
    "id": 2510655703,
    "node_id": "PR_kwDOAAGfRs56rchW",
    "number": 1779,
    "title": "Update and improve ordering language in documentation.",
    "user": {
      "login": "vitiral",
      "id": 5587659,
      "node_id": "MDQ6VXNlcjU1ODc2NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5587659?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vitiral",
      "html_url": "https://github.com/vitiral",
      "followers_url": "https://api.github.com/users/vitiral/followers",
      "following_url": "https://api.github.com/users/vitiral/following{/other_user}",
      "gists_url": "https://api.github.com/users/vitiral/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vitiral/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vitiral/subscriptions",
      "organizations_url": "https://api.github.com/users/vitiral/orgs",
      "repos_url": "https://api.github.com/users/vitiral/repos",
      "events_url": "https://api.github.com/users/vitiral/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vitiral/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2024-09-06T15:10:55Z",
    "updated_at": "2024-09-06T15:14:18Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1779",
      "html_url": "https://github.com/junit-team/junit4/pull/1779",
      "diff_url": "https://github.com/junit-team/junit4/pull/1779.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1779.patch",
      "merged_at": null
    },
    "body": "The intro to ordering didn't mention the order argument, likely it was written before the option was added. This CL moves all the language into the ordering section and improves the conciceness of the information.\r\n\r\nI didn't update the `@since` since no information was added or removed.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1779/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1779/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1765",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1765/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1765/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1765/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1765",
    "id": 1964764498,
    "node_id": "PR_kwDOAAGfRs5d7sZo",
    "number": 1765,
    "title": "Flaky test fixed for testJvmMethodSorter",
    "user": {
      "login": "Doom-Prophet",
      "id": 66361320,
      "node_id": "MDQ6VXNlcjY2MzYxMzIw",
      "avatar_url": "https://avatars.githubusercontent.com/u/66361320?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Doom-Prophet",
      "html_url": "https://github.com/Doom-Prophet",
      "followers_url": "https://api.github.com/users/Doom-Prophet/followers",
      "following_url": "https://api.github.com/users/Doom-Prophet/following{/other_user}",
      "gists_url": "https://api.github.com/users/Doom-Prophet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Doom-Prophet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Doom-Prophet/subscriptions",
      "organizations_url": "https://api.github.com/users/Doom-Prophet/orgs",
      "repos_url": "https://api.github.com/users/Doom-Prophet/repos",
      "events_url": "https://api.github.com/users/Doom-Prophet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Doom-Prophet/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2023-10-27T04:53:13Z",
    "updated_at": "2023-11-03T22:33:42Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1765",
      "html_url": "https://github.com/junit-team/junit4/pull/1765",
      "diff_url": "https://github.com/junit-team/junit4/pull/1765.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1765.patch",
      "merged_at": null
    },
    "body": "### Description\r\nFlaky tests are common occurrences in open-source projects, yielding inconsistent results—sometimes passing and sometimes failing—without code changes. NonDex is a tool for detecting and debugging wrong assumptions on under-determined Java APIs. I have resolved a flaky test issue using NonDex tool, specifically in the `MethodSorterTest `class located at `org.junit.internal.MethodSorterTest.testJvmMethodSorter`\r\n\r\n### Root cause\r\nThe flakiness comes from the original codes which tends to sort the list of methods of a class, and use this test to test whether the declared methods of a class is gotten in a predictable order after going through his method sorter. However, the codes here firstly gets the first list of methods using `java.lang.Class.getDeclaredMethods()`, then gets the second one by making the class of methods going through the sorter, notice that the sorter is written based on a comparator that compare the '**methods**' words by getting their hashcode. The fact is, `java.lang.Class.getDeclaredMethods()` method in Java does not guarantee a specific order for the returned methods. The order in which the methods are returned is not specified and may vary between different Java implementations or versions.\r\n\r\n### Fix\r\nThe logical of comparator is correct, the test is made flaky only because of `java.lang.Class.getDeclaredMethods()`, thus remove that function to get the methods' list, instead directly apply the comparator's logic in the test to make it work normally.\r\n\r\n### Setup\r\nJava: openjdk version \"11.0.20.1\"\r\nMaven: Apache Maven 3.6.3\r\n\r\n### How to test\r\n\r\n1. Compile the module\r\n`mvn install -pl . -am -DskipTests`\r\n2. Run regular tests\r\n`mvn -pl . test -Dtest=org.junit.internal.MethodSorterTest#testJvmMethodSorter`\r\n3. Run tests with NonDex tool\r\n`mvn -pl . edu.illinois:nondex-maven-plugin:2.1.1:nondex -Dtest=org.junit.internal.MethodSorterTest#testJvmMethodSorter`\r\n\r\nAfter fix, all tests pass",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1765/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1765/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1751",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1751/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1751/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1751/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1751",
    "id": 1400275838,
    "node_id": "I_kwDOAAGfRs5TdoN-",
    "number": 1751,
    "title": "Make Assert failNotEquals public",
    "user": {
      "login": "Martin-Office",
      "id": 106544914,
      "node_id": "U_kgDOBlm_Eg",
      "avatar_url": "https://avatars.githubusercontent.com/u/106544914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Martin-Office",
      "html_url": "https://github.com/Martin-Office",
      "followers_url": "https://api.github.com/users/Martin-Office/followers",
      "following_url": "https://api.github.com/users/Martin-Office/following{/other_user}",
      "gists_url": "https://api.github.com/users/Martin-Office/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Martin-Office/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Martin-Office/subscriptions",
      "organizations_url": "https://api.github.com/users/Martin-Office/orgs",
      "repos_url": "https://api.github.com/users/Martin-Office/repos",
      "events_url": "https://api.github.com/users/Martin-Office/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Martin-Office/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-10-06T20:41:42Z",
    "updated_at": "2022-10-07T08:56:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "I had to implement a custom equal function but I cannot report the failure with the existing functionality of Assert class. \r\nI wanted to reuse the function Assert.failNotEquals but it's private, not sure why.\r\nCan you make it public?",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1751/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1741",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1741/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1741/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1741/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1741",
    "id": 1241694431,
    "node_id": "I_kwDOAAGfRs5KAsDf",
    "number": 1741,
    "title": "Update to hamcrest 2.2",
    "user": {
      "login": "juliocbcotta",
      "id": 70573,
      "node_id": "MDQ6VXNlcjcwNTcz",
      "avatar_url": "https://avatars.githubusercontent.com/u/70573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/juliocbcotta",
      "html_url": "https://github.com/juliocbcotta",
      "followers_url": "https://api.github.com/users/juliocbcotta/followers",
      "following_url": "https://api.github.com/users/juliocbcotta/following{/other_user}",
      "gists_url": "https://api.github.com/users/juliocbcotta/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/juliocbcotta/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/juliocbcotta/subscriptions",
      "organizations_url": "https://api.github.com/users/juliocbcotta/orgs",
      "repos_url": "https://api.github.com/users/juliocbcotta/repos",
      "events_url": "https://api.github.com/users/juliocbcotta/events{/privacy}",
      "received_events_url": "https://api.github.com/users/juliocbcotta/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 16,
    "created_at": "2022-05-19T12:24:48Z",
    "updated_at": "2024-04-07T06:35:52Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "Can we have a version of junit4 with a recent version of hamcrest?\r\nThanks",
    "closed_by": {
      "login": "marcphilipp",
      "id": 214207,
      "node_id": "MDQ6VXNlcjIxNDIwNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/214207?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcphilipp",
      "html_url": "https://github.com/marcphilipp",
      "followers_url": "https://api.github.com/users/marcphilipp/followers",
      "following_url": "https://api.github.com/users/marcphilipp/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcphilipp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcphilipp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcphilipp/subscriptions",
      "organizations_url": "https://api.github.com/users/marcphilipp/orgs",
      "repos_url": "https://api.github.com/users/marcphilipp/repos",
      "events_url": "https://api.github.com/users/marcphilipp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcphilipp/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1741/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1741/timeline",
    "performed_via_github_app": null,
    "state_reason": "reopened"
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1737",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1737/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1737/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1737/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1737",
    "id": 1198657378,
    "node_id": "PR_kwDOAAGfRs418JAY",
    "number": 1737,
    "title": "Possibility to specify suite classes in custom Categories subclasses constructor",
    "user": {
      "login": "dbratusa",
      "id": 2320000,
      "node_id": "MDQ6VXNlcjIzMjAwMDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2320000?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbratusa",
      "html_url": "https://github.com/dbratusa",
      "followers_url": "https://api.github.com/users/dbratusa/followers",
      "following_url": "https://api.github.com/users/dbratusa/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbratusa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbratusa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbratusa/subscriptions",
      "organizations_url": "https://api.github.com/users/dbratusa/orgs",
      "repos_url": "https://api.github.com/users/dbratusa/repos",
      "events_url": "https://api.github.com/users/dbratusa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbratusa/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2022-04-09T14:50:00Z",
    "updated_at": "2022-05-02T18:04:17Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1737",
      "html_url": "https://github.com/junit-team/junit4/pull/1737",
      "diff_url": "https://github.com/junit-team/junit4/pull/1737.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1737.patch",
      "merged_at": null
    },
    "body": "If subclassing the Suite class one can implement a constructor which can invoke a custom static method to specify test suite classes. This is currently not possible with subclasses ob Categories.\r\n\r\nTherefore i propose this small fix to expose the constructor with the signature Categories(RunnerBuilder, Class<?>, Class<?>[]) to subclasses.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1737/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1737/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1725",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1725/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1725/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1725/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1725",
    "id": 1032851168,
    "node_id": "I_kwDOAAGfRs49kA7g",
    "number": 1725,
    "title": "@Rule execution order looks to have been guaranteed since 4.12 but is not documented as such",
    "user": {
      "login": "cpovirk",
      "id": 1703908,
      "node_id": "MDQ6VXNlcjE3MDM5MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1703908?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cpovirk",
      "html_url": "https://github.com/cpovirk",
      "followers_url": "https://api.github.com/users/cpovirk/followers",
      "following_url": "https://api.github.com/users/cpovirk/following{/other_user}",
      "gists_url": "https://api.github.com/users/cpovirk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cpovirk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cpovirk/subscriptions",
      "organizations_url": "https://api.github.com/users/cpovirk/orgs",
      "repos_url": "https://api.github.com/users/cpovirk/repos",
      "events_url": "https://api.github.com/users/cpovirk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cpovirk/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-10-21T19:09:05Z",
    "updated_at": "2021-10-21T21:38:40Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "My understanding is that https://github.com/junit-team/junit4/commit/c75dcc28810aeb1c918ee7430981b31f41742ea7#diff-f35409420f2540415a9878beaf5a537248f301b6c683bb87a11016be3c9dc8b8R55 caused JUnit to begin processing `@Rule` fields in a defined order. The `@Rule` Javadoc, however, still [states](https://github.com/junit-team/junit4/blob/7167b23b3ba7dd79410f6e9db350d16cbe30617b/src/main/java/org/junit/Rule.java#L20-L22) that the order is defined by the JVM's reflection API.\r\n\r\nIt would be good to know whether the intent is to commit to this order or not. I suppose that the current doc is technically wrong either way, since the current order is not dependent _on the JVM reflection API_ :) But mainly I want to know how safe this is to rely on. Thanks.\r\n\r\n(Sorry if I missed some past discussion in my searching or if I've misunderstood something.)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1725/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1725/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1724",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1724/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1724/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1724/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1724",
    "id": 1028317370,
    "node_id": "PR_kwDOAAGfRs4tSh__",
    "number": 1724,
    "title": "WIP validate actual rule type",
    "user": {
      "login": "panchenko",
      "id": 440271,
      "node_id": "MDQ6VXNlcjQ0MDI3MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/440271?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/panchenko",
      "html_url": "https://github.com/panchenko",
      "followers_url": "https://api.github.com/users/panchenko/followers",
      "following_url": "https://api.github.com/users/panchenko/following{/other_user}",
      "gists_url": "https://api.github.com/users/panchenko/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/panchenko/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/panchenko/subscriptions",
      "organizations_url": "https://api.github.com/users/panchenko/orgs",
      "repos_url": "https://api.github.com/users/panchenko/repos",
      "events_url": "https://api.github.com/users/panchenko/events{/privacy}",
      "received_events_url": "https://api.github.com/users/panchenko/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-10-17T13:01:21Z",
    "updated_at": "2022-01-22T05:53:52Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1724",
      "html_url": "https://github.com/junit-team/junit4/pull/1724",
      "diff_url": "https://github.com/junit-team/junit4/pull/1724.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1724.patch",
      "merged_at": null
    },
    "body": "Another attempt to solve #1720\r\nThe only my motivation - if this would help with improving testcontainers support of junit5 :-)\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1724/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1724/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1721",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1721/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1721/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1721/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1721",
    "id": 1021952523,
    "node_id": "PR_kwDOAAGfRs4s-4e7",
    "number": 1721,
    "title": "Validate actual rule object instead of Field#type for @Rule",
    "user": {
      "login": "vlsi",
      "id": 213894,
      "node_id": "MDQ6VXNlcjIxMzg5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/213894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlsi",
      "html_url": "https://github.com/vlsi",
      "followers_url": "https://api.github.com/users/vlsi/followers",
      "following_url": "https://api.github.com/users/vlsi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlsi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlsi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlsi/subscriptions",
      "organizations_url": "https://api.github.com/users/vlsi/orgs",
      "repos_url": "https://api.github.com/users/vlsi/repos",
      "events_url": "https://api.github.com/users/vlsi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlsi/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2021-10-10T11:06:51Z",
    "updated_at": "2021-10-10T11:06:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1721",
      "html_url": "https://github.com/junit-team/junit4/pull/1721",
      "diff_url": "https://github.com/junit-team/junit4/pull/1721.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1721.patch",
      "merged_at": null
    },
    "body": "fixes #1720",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1721/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1721/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1720",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1720/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1720/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1720/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1720",
    "id": 1020922970,
    "node_id": "I_kwDOAAGfRs482gxa",
    "number": 1720,
    "title": "Validate actual rule object instead of Field#type for @Rule",
    "user": {
      "login": "vlsi",
      "id": 213894,
      "node_id": "MDQ6VXNlcjIxMzg5NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/213894?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vlsi",
      "html_url": "https://github.com/vlsi",
      "followers_url": "https://api.github.com/users/vlsi/followers",
      "following_url": "https://api.github.com/users/vlsi/following{/other_user}",
      "gists_url": "https://api.github.com/users/vlsi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vlsi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vlsi/subscriptions",
      "organizations_url": "https://api.github.com/users/vlsi/orgs",
      "repos_url": "https://api.github.com/users/vlsi/repos",
      "events_url": "https://api.github.com/users/vlsi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vlsi/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 22,
    "created_at": "2021-10-08T10:05:07Z",
    "updated_at": "2021-10-19T07:38:07Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "Currently, JUnit validates field's type, and it wants the declaration to implement `TestRule`.\r\n\r\nIs there a reason for that? What if JUnit4 validated the actual value rather than field type?\r\n\r\nThe validation makes it harder to implement code that supports both JUnit4 and JUnit5.\r\n\r\nSample issue: https://github.com/testcontainers/testcontainers-java/issues/970 (/cc @bsideup, @baev)\r\n\r\nTL;DR: Testcontainers has to implement junit4-specific interfaces in Testcontainers APIs, thus Testcontainers forces everybody to have JUnit4 on the classpath which is sad.\r\n\r\nhttps://github.com/testcontainers/testcontainers-java/blob/aa273b5c0136d8bf8d9eb308040b30006ad98144/core/src/main/java/org/testcontainers/containers/Network.java#L20\r\n\r\n```java\r\npublic interface Network extends AutoCloseable, TestRule { // <-- it would be so much better to be able to remove TestRule here\r\n...\r\n```\r\n\r\nHowever, if `Network extends TestRule` is replaced with `NetworkImpl implements Network, TestRule`, then JUnit4 fails as follows:\r\n\r\n```java\r\n@RunWith(Enclosed.class)\r\npublic class NetworkTest {\r\n\r\n    public static class WithRules {\r\n\r\n        @Rule\r\n        public Network network = newNetwork();\r\n```\r\n\r\n```\r\nGradle Test Executor 1 > org.testcontainers.containers.NetworkTest > org.testcontainers.containers.NetworkTest$WithRules.initializationError FAILED\r\n    org.junit.runners.model.InvalidTestClassError: Invalid test class 'org.testcontainers.containers.NetworkTest$WithRules':\r\n      1. The @Rule 'network' must implement MethodRule or TestRule.\r\n        at org.junit.runners.ParentRunner.validate(ParentRunner.java:525)\r\n        at org.junit.runners.ParentRunner.<init>(ParentRunner.java:102)\r\n        at org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:84)\r\n        at org.junit.runners.JUnit4.<init>(JUnit4.java:23)\r\n        at org.junit.internal.builders.JUnit4Builder.runnerForClass(JUnit4Builder.java:10)\r\n        at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\r\n        at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:37)\r\n        at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\r\n        at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:125)\r\n        at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:111)\r\n        at org.junit.runners.Suite.<init>(Suite.java:102)\r\n        at org.junit.experimental.runners.Enclosed.<init>(Enclosed.java:31)\r\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n        at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:107)\r\n        at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n        at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\r\n        at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:37)\r\n        at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:70)\r\n        at org.junit.internal.requests.ClassRequest.createRunner(ClassRequest.java:28)\r\n        at org.junit.internal.requests.MemoizingRequest.getRunner(MemoizingRequest.java:19)\r\n        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:78)\r\n        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)\r\n        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)\r\n        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)\r\n        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\r\n```\r\n\r\nSee also https://github.com/junit-team/junit4/pull/1020",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1720/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 2
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1720/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1703",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1703/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1703/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1703/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1703",
    "id": 819957502,
    "node_id": "MDU6SXNzdWU4MTk5NTc1MDI=",
    "number": 1703,
    "title": "Don't convert assumption failures to errors in ErrorCollector.addError()",
    "user": {
      "login": "prbprbprb",
      "id": 44170157,
      "node_id": "MDQ6VXNlcjQ0MTcwMTU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/44170157?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prbprbprb",
      "html_url": "https://github.com/prbprbprb",
      "followers_url": "https://api.github.com/users/prbprbprb/followers",
      "following_url": "https://api.github.com/users/prbprbprb/following{/other_user}",
      "gists_url": "https://api.github.com/users/prbprbprb/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prbprbprb/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prbprbprb/subscriptions",
      "organizations_url": "https://api.github.com/users/prbprbprb/orgs",
      "repos_url": "https://api.github.com/users/prbprbprb/repos",
      "events_url": "https://api.github.com/users/prbprbprb/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prbprbprb/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-03-02T12:09:03Z",
    "updated_at": "2021-07-07T23:30:08Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "This was previously discussed in #1363 and I think the new treatment of `ErrorCollector. checkSucceeds()` is correct.  However `ErrorCollector.addError()` is more commonly used when calling sub-methods or in wrapper `Rules` ([AOSP example](https://cs.android.com/android/platform/superproject/+/master:cts/tests/framework/base/windowmanager/util/src/android/server/wm/ActivityManagerTestBase.java;l=2476;drc=97181d9dbd5b13275a88120c1cd66af7fb7eeae2)) so it seems clearer (to me) to pass assumption failures through.\r\n\r\n#1702 is potential fix, although this has similar properties to what #1363 complained about, i.e. if `addError()` is used to add multiple assumption failures then they'll get re-thrown as a  `MultipleFailureException` causing the test to fail.  It seems to me that in that case the test probably needs restructuring anyway (e.g. to check its assumptions *before* calling multiple sub-methods), but I'm open to opinions.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1703/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1703/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1701",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1701/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1701/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1701/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1701",
    "id": 813591021,
    "node_id": "MDU6SXNzdWU4MTM1OTEwMjE=",
    "number": 1701,
    "title": "OrderWith in parameterized tests",
    "user": {
      "login": "phoenix384",
      "id": 3883662,
      "node_id": "MDQ6VXNlcjM4ODM2NjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3883662?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/phoenix384",
      "html_url": "https://github.com/phoenix384",
      "followers_url": "https://api.github.com/users/phoenix384/followers",
      "following_url": "https://api.github.com/users/phoenix384/following{/other_user}",
      "gists_url": "https://api.github.com/users/phoenix384/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/phoenix384/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/phoenix384/subscriptions",
      "organizations_url": "https://api.github.com/users/phoenix384/orgs",
      "repos_url": "https://api.github.com/users/phoenix384/repos",
      "events_url": "https://api.github.com/users/phoenix384/events{/privacy}",
      "received_events_url": "https://api.github.com/users/phoenix384/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 80119535,
        "node_id": "MDU6TGFiZWw4MDExOTUzNQ==",
        "url": "https://api.github.com/repos/junit-team/junit4/labels/parameterized",
        "name": "parameterized",
        "color": "0052cc",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2021-02-22T15:13:20Z",
    "updated_at": "2022-11-15T04:59:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "The ordering introduced with #1130 is a great feature. Also the fact that the annotation is inherited is really helpful in some cases.\r\n\r\nBut when a parameterized test inherits an OrderWith annotation, its parameters get reordered as well.\r\nAnother case where this behaviour could be a problem would be a parameterized test with more than one test method, where you add an OrderWith annotation in order to sort the test methods but not the parameters.\r\n\r\nAs long as the parameters name value starts with \"{index}\" and the amount of parameters is <10 there is no problem, because the order remains the same (at least with the provided alphanumeric ordering). If there are >10 parameters, the alphabetical order is 1, 10, 11, 2, 3, ...\r\n\r\nI could think of the following possibilites to solve this:\r\n- OrderWith should only sort test methods - not parameters. You have enough control over the parameter order in the parameters method and that order should not get changed.\r\n- Add leading zeros to the {index} placeholder value or add an additional placeholder that outputs the index with leading zeros.\r\n- Add an ordering to use with the OrderWith annotation using the org.junit.runner.manipulation.Sorter.NULL sorter to be able to override an inherited ordering (only solves case 1)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1701/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1701/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1696",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1696/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1696/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1696/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1696",
    "id": 802122925,
    "node_id": "MDU6SXNzdWU4MDIxMjI5MjU=",
    "number": 1696,
    "title": "Build failure with OpenJDK 17",
    "user": {
      "login": "ebourg",
      "id": 54304,
      "node_id": "MDQ6VXNlcjU0MzA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/54304?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ebourg",
      "html_url": "https://github.com/ebourg",
      "followers_url": "https://api.github.com/users/ebourg/followers",
      "following_url": "https://api.github.com/users/ebourg/following{/other_user}",
      "gists_url": "https://api.github.com/users/ebourg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ebourg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ebourg/subscriptions",
      "organizations_url": "https://api.github.com/users/ebourg/orgs",
      "repos_url": "https://api.github.com/users/ebourg/repos",
      "events_url": "https://api.github.com/users/ebourg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ebourg/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 3631703,
        "node_id": "MDU6TGFiZWwzNjMxNzAz",
        "url": "https://api.github.com/repos/junit-team/junit4/labels/javadoc",
        "name": "javadoc",
        "color": "e102d8",
        "default": false,
        "description": null
      },
      {
        "id": 3631716,
        "node_id": "MDU6TGFiZWwzNjMxNzE2",
        "url": "https://api.github.com/repos/junit-team/junit4/labels/maven",
        "name": "maven",
        "color": "0b02e1",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2021-02-05T12:23:51Z",
    "updated_at": "2021-02-13T13:52:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "There is a build failure with OpenJDK 17 caused by javadoc errors:\r\n\r\n    [INFO] -------------------------------------------------------------\r\n    [ERROR] COMPILATION ERROR :\r\n    [INFO] -------------------------------------------------------------\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/runners/Parameterized.java:[125,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/Test.java:[31,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/ClassRule.java:[34,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/rules/ExpectedException.java:[19,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [ERROR] /<<PKGBUILDDIR>>/src/main/java/org/junit/Rule.java:[26,3] error: heading used out of sequence: <H3>, compared to implicit preceding heading: <H1>\r\n    [INFO] 5 errors\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1696/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1663",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1663/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1663/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1663/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1663",
    "id": 626787325,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDI0NzEyNzc4",
    "number": 1663,
    "title": "Consider declaring class for Enclosed tests in  Categories",
    "user": {
      "login": "jwgmeligmeyling",
      "id": 3469492,
      "node_id": "MDQ6VXNlcjM0Njk0OTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3469492?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jwgmeligmeyling",
      "html_url": "https://github.com/jwgmeligmeyling",
      "followers_url": "https://api.github.com/users/jwgmeligmeyling/followers",
      "following_url": "https://api.github.com/users/jwgmeligmeyling/following{/other_user}",
      "gists_url": "https://api.github.com/users/jwgmeligmeyling/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jwgmeligmeyling/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jwgmeligmeyling/subscriptions",
      "organizations_url": "https://api.github.com/users/jwgmeligmeyling/orgs",
      "repos_url": "https://api.github.com/users/jwgmeligmeyling/repos",
      "events_url": "https://api.github.com/users/jwgmeligmeyling/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jwgmeligmeyling/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2020-05-28T20:17:44Z",
    "updated_at": "2021-04-11T21:48:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1663",
      "html_url": "https://github.com/junit-team/junit4/pull/1663",
      "diff_url": "https://github.com/junit-team/junit4/pull/1663.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1663.patch",
      "merged_at": null
    },
    "body": "At QueryDSL, we were surprised that Enclosed tests were not run when the category was included as group filter.\r\n\r\nIt turns out to be because the declaring class is not considered when determining the categories for a particular test. This pull request changes that behaviour to also consider the declaring class.\r\n\r\nExample:\r\n\r\n```java\r\n@Category(H2.class)\r\npublic class H2LiteralsSuiteTest extends AbstractSuite {\r\n\r\n    public static class BeanPopulation extends BeanPopulationBase { }\r\n    public static class Delete extends DeleteBase { }\r\n    public static class Insert extends InsertBase { }\r\n    public static class KeywordQuoting extends KeywordQuotingBase { }\r\n    public static class LikeEscape extends LikeEscapeBase { }\r\n```\r\n\r\nWhere `AbstractSuite` is annotated with `@RunWith(Enclosed.class)`.\r\n\r\nWhen `<groups>com.querydsl.core.testutil.H2</groups>` is used, none of the inner test classes is executed, unless they themselves are annotated with `@Category(H2.class)`. To us it would make sense that this is implicit.\r\n\r\nSource: https://github.com/querydsl/querydsl/blob/master/querydsl-sql/src/test/java/com/querydsl/sql/suites/H2LiteralsSuiteTest.java#L9-L16",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1663/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1663/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1651",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1651/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1651/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1651/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1651",
    "id": 562943631,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzczNDQ4NzYw",
    "number": 1651,
    "title": "Theories: only get all data points from enum and boolean types if the…",
    "user": {
      "login": "awturner",
      "id": 9278052,
      "node_id": "MDQ6VXNlcjkyNzgwNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9278052?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awturner",
      "html_url": "https://github.com/awturner",
      "followers_url": "https://api.github.com/users/awturner/followers",
      "following_url": "https://api.github.com/users/awturner/following{/other_user}",
      "gists_url": "https://api.github.com/users/awturner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awturner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awturner/subscriptions",
      "organizations_url": "https://api.github.com/users/awturner/orgs",
      "repos_url": "https://api.github.com/users/awturner/repos",
      "events_url": "https://api.github.com/users/awturner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awturner/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 491907783,
        "node_id": "MDU6TGFiZWw0OTE5MDc3ODM=",
        "url": "https://api.github.com/repos/junit-team/junit4/labels/changes%20requested",
        "name": "changes requested",
        "color": "b60205",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2020-02-11T02:40:35Z",
    "updated_at": "2021-09-30T01:54:44Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1651",
      "html_url": "https://github.com/junit-team/junit4/pull/1651",
      "diff_url": "https://github.com/junit-team/junit4/pull/1651.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1651.patch",
      "merged_at": null
    },
    "body": "…re is no @FromDataPoints annotation, or the named data points represent a non-empty set of the same type.\r\n\r\nFixes #1648",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1651/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1651/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1648",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1648/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1648/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1648/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1648",
    "id": 561685104,
    "node_id": "MDU6SXNzdWU1NjE2ODUxMDQ=",
    "number": 1648,
    "title": "`@FromDataPoints(\"misspelled\") EnumType` shouldn't test all enum values",
    "user": {
      "login": "awturner",
      "id": 9278052,
      "node_id": "MDQ6VXNlcjkyNzgwNTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9278052?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/awturner",
      "html_url": "https://github.com/awturner",
      "followers_url": "https://api.github.com/users/awturner/followers",
      "following_url": "https://api.github.com/users/awturner/following{/other_user}",
      "gists_url": "https://api.github.com/users/awturner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/awturner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/awturner/subscriptions",
      "organizations_url": "https://api.github.com/users/awturner/orgs",
      "repos_url": "https://api.github.com/users/awturner/repos",
      "events_url": "https://api.github.com/users/awturner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/awturner/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 14312,
        "node_id": "MDU6TGFiZWwxNDMxMg==",
        "url": "https://api.github.com/repos/junit-team/junit4/labels/bug",
        "name": "bug",
        "color": "ff0000",
        "default": true,
        "description": null
      },
      {
        "id": 3631648,
        "node_id": "MDU6TGFiZWwzNjMxNjQ4",
        "url": "https://api.github.com/repos/junit-team/junit4/labels/theories",
        "name": "theories",
        "color": "0b02e1",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2020-02-07T14:53:47Z",
    "updated_at": "2024-06-14T10:02:46Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "```java\r\n@RunWith(Theories.class)\r\npublic class NonExistentTheory {\r\n  @DataPoints(\"foo\")\r\n  public static final ImmutableSet<MetaSyntacticVariable> FOOS =\r\n      ImmutableSet.of(MetaSyntacticVariable.FOO);\r\n\r\n  @Theory\r\n  public void doWithTheFoo(@FromDataPoints(\"bar\") MetaSyntacticVariable whatever) {\r\n    System.err.println(whatever);\r\n  }\r\n\r\n  @Theory\r\n  public void doWithTheBoolean(@FromDataPoints(\"bar\") boolean whatever) {\r\n    System.err.println(whatever);\r\n  }\r\n\r\n  enum MetaSyntacticVariable {\r\n    FOO, BAR, BAZ\r\n  }\r\n}\r\n```\r\n\r\nIt is surprising that these `@FromDataPoints`-annotated parameters receive the same values as if the annotation were omitted. This means that typos in data point names aren't flagged as errors.\r\n\r\nIf the `@FromDataPoints` is present, and nothing matches, it would be helpful to raise \"Never found parameters that satisfied method assumptions.\".",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1648/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1648/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1635",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1635/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1635/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1635/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1635",
    "id": 509794779,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzMwMjY5Mjg1",
    "number": 1635,
    "title": "Made some variable names more consistent with the other parts.",
    "user": {
      "login": "euske",
      "id": 143989,
      "node_id": "MDQ6VXNlcjE0Mzk4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/143989?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/euske",
      "html_url": "https://github.com/euske",
      "followers_url": "https://api.github.com/users/euske/followers",
      "following_url": "https://api.github.com/users/euske/following{/other_user}",
      "gists_url": "https://api.github.com/users/euske/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/euske/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/euske/subscriptions",
      "organizations_url": "https://api.github.com/users/euske/orgs",
      "repos_url": "https://api.github.com/users/euske/repos",
      "events_url": "https://api.github.com/users/euske/events{/privacy}",
      "received_events_url": "https://api.github.com/users/euske/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-21T07:57:45Z",
    "updated_at": "2021-01-04T19:13:00Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1635",
      "html_url": "https://github.com/junit-team/junit4/pull/1635",
      "diff_url": "https://github.com/junit-team/junit4/pull/1635.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1635.patch",
      "merged_at": null
    },
    "body": "Hello, we're developing an automated system that detects inconsistent variable names in a large software project. Our system checks if each variable name is consistent with other variables in the project in its usage pattern, and proposes correct candidates if inconsistency is detected. This is a part of academic research that we hope to publish soon, but as a part of the evaluation, we applied our systems to your projects and got a few interesting results. We carefully reviewed our system output and manually created a patch to correct a few variable names. We would be delighted if this patch is found to be useful. If you have a question or suggestion regarding this patch, we'd happily\r\nanswer. Thank you.\r\n\r\nP.S. our patch is purely for readability purposes and does not change any functionality. A couple of issues that we've noticed were left untouched. For example, mixed use of variable names \"msg\" and \"message\" were fairly widespread, but we have only corrected a few notable instances to minimize our impact.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1635/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1635/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1629",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1629/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1629/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1629/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1629",
    "id": 504602826,
    "node_id": "MDU6SXNzdWU1MDQ2MDI4MjY=",
    "number": 1629,
    "title": "Performance issue: @DataPoints from functions and @Theory with multiple arguments",
    "user": {
      "login": "dev930018",
      "id": 56113485,
      "node_id": "MDQ6VXNlcjU2MTEzNDg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/56113485?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dev930018",
      "html_url": "https://github.com/dev930018",
      "followers_url": "https://api.github.com/users/dev930018/followers",
      "following_url": "https://api.github.com/users/dev930018/following{/other_user}",
      "gists_url": "https://api.github.com/users/dev930018/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dev930018/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dev930018/subscriptions",
      "organizations_url": "https://api.github.com/users/dev930018/orgs",
      "repos_url": "https://api.github.com/users/dev930018/repos",
      "events_url": "https://api.github.com/users/dev930018/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dev930018/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-10-09T11:57:06Z",
    "updated_at": "2019-10-09T11:57:06Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "This is still an issue as of 4.12 and can cause a huge unexpected performance hit.\r\n\r\n## Minimal example\r\nFor `N=5` datapoints of type `T=int` and `M=3` arguments of type `T` to a Theory\r\n```\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.experimental.theories.Theory;\r\nimport org.junit.experimental.theories.Theories;\r\nimport org.junit.experimental.theories.DataPoints;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\n@RunWith(Theories.class)\r\npublic class DataPointsBug {\r\n\r\n    @DataPoints\r\n    public static int[] generateDataPoints() {\r\n        System.out.println(\"generateDataPoints()\");\r\n        // Expensive operation\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException ex) {\r\n        }\r\n        return new int[] {1,2,3,4,5};\r\n    }\r\n\r\n    @Theory\r\n    public void manyArguments(int a, int b, int c) {\r\n        // Cheap test\r\n        assertTrue(a > 0 && b > 0 && c > 0);\r\n    }\r\n}\r\n```\r\n\r\n## Output\r\n```\r\ngenerateDataPoints()\r\n<line repeated 30 more times>\r\n\r\nFinished in 31s 45ms\r\n```\r\n\r\nIn general, for `N` datapoints of type `T` and a Theory taking `M` arguments of type `T`, this requires `S = sum(1 + N + N^2 + ... + N^M) ~ O(N^M)`, which seems pretty excessive...\r\n\r\n## Workaround\r\nIt is an easy-enough workaround to store the generator output once and annotate the variable with `@DataPoints`:\r\n\r\n```\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.experimental.theories.Theory;\r\nimport org.junit.experimental.theories.Theories;\r\nimport org.junit.experimental.theories.DataPoints;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\n@RunWith(Theories.class)\r\npublic class DataPointsBug {\r\n\r\n    private static int[] generateDataPoints() {\r\n        System.out.println(\"generateDataPoints()\");\r\n        // Expensive operation\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException ex) {\r\n        }\r\n        return new int[] {1,2,3,4,5};\r\n    }\r\n    @DataPoints\r\n    public static int[] dataPoints = generateDataPoints();\r\n\r\n    @Theory\r\n    public void manyArguments(int a, int b, int c) {\r\n        // Cheap test\r\n        assertTrue(a > 0 && b > 0 && c > 0);\r\n    }\r\n}\r\n```\r\n\r\n## Output\r\n```\r\ngenerateDataPoints()\r\n\r\nFinished in 1s 37ms\r\n```\r\n\r\nShould this be re-opened and addressed?\r\n\r\n_Originally posted by @dev930018 in https://github.com/junit-team/junit4/issues/82#issuecomment-539967865_",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1629/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1626",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1626/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1626/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1626/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1626",
    "id": 489991768,
    "node_id": "MDU6SXNzdWU0ODk5OTE3Njg=",
    "number": 1626,
    "title": "`failNotSame` message could emphasize reference equality",
    "user": {
      "login": "sabi0",
      "id": 11509875,
      "node_id": "MDQ6VXNlcjExNTA5ODc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/11509875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sabi0",
      "html_url": "https://github.com/sabi0",
      "followers_url": "https://api.github.com/users/sabi0/followers",
      "following_url": "https://api.github.com/users/sabi0/following{/other_user}",
      "gists_url": "https://api.github.com/users/sabi0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sabi0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sabi0/subscriptions",
      "organizations_url": "https://api.github.com/users/sabi0/orgs",
      "repos_url": "https://api.github.com/users/sabi0/repos",
      "events_url": "https://api.github.com/users/sabi0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sabi0/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-09-05T20:43:18Z",
    "updated_at": "2019-09-10T18:30:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "When calling `assertSame` for two different instances of identical objects the failure message will be quite confusing: \"expected same:<[1, 2]> was not:<[1, 2]>\".\r\nSee https://github.com/junit-team/junit4/blob/8c9e81daf38efa8b4af9ba5c55fe83765ac434d6/src/main/java/org/junit/Assert.java#L829\r\n\r\nI think the clarity could be improved by adding identityHashCode to the message, like this:\r\n\"expected same:<[1, 2]@ba38e> was not:<[1, 2]@de440>\"\r\nOr maybe even with the class name:\r\n\"expected same:<java.util.List@ba38e [1, 2]> was not:<java.util.List@de440 [1, 2]>\"",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1626/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1619",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1619/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1619/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1619/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1619",
    "id": 458231532,
    "node_id": "MDU6SXNzdWU0NTgyMzE1MzI=",
    "number": 1619,
    "title": "Feature request: add java.time.Duration support to org.junit.rules.Timeout",
    "user": {
      "login": "kluever",
      "id": 2036304,
      "node_id": "MDQ6VXNlcjIwMzYzMDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2036304?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kluever",
      "html_url": "https://github.com/kluever",
      "followers_url": "https://api.github.com/users/kluever/followers",
      "following_url": "https://api.github.com/users/kluever/following{/other_user}",
      "gists_url": "https://api.github.com/users/kluever/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kluever/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kluever/subscriptions",
      "organizations_url": "https://api.github.com/users/kluever/orgs",
      "repos_url": "https://api.github.com/users/kluever/repos",
      "events_url": "https://api.github.com/users/kluever/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kluever/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 7,
    "created_at": "2019-06-19T21:18:47Z",
    "updated_at": "2019-06-20T17:38:31Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "Representing durations as `long`s can easily lead to unit mismatch problems.\r\nRepresenting durations as `long, TimeUnit` pairs can require plumbing 2 values through multiple layers (and can suffer from unit mismatch or truncation issues).\r\n\r\nCould proper `java.time.Duration` support be added to the `Timeout` class?\r\n\r\n(If this should be filed under junit5, please let me know and I'll open it there.)",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1619/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1619/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1604",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1604/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1604/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1604/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1604",
    "id": 432437229,
    "node_id": "MDU6SXNzdWU0MzI0MzcyMjk=",
    "number": 1604,
    "title": "Attempting to rerun failing JUnit 4 Parameterized tests in IDEA fails",
    "user": {
      "login": "Panthro",
      "id": 1565421,
      "node_id": "MDQ6VXNlcjE1NjU0MjE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1565421?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Panthro",
      "html_url": "https://github.com/Panthro",
      "followers_url": "https://api.github.com/users/Panthro/followers",
      "following_url": "https://api.github.com/users/Panthro/following{/other_user}",
      "gists_url": "https://api.github.com/users/Panthro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Panthro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Panthro/subscriptions",
      "organizations_url": "https://api.github.com/users/Panthro/orgs",
      "repos_url": "https://api.github.com/users/Panthro/repos",
      "events_url": "https://api.github.com/users/Panthro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Panthro/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 80119535,
        "node_id": "MDU6TGFiZWw4MDExOTUzNQ==",
        "url": "https://api.github.com/repos/junit-team/junit4/labels/parameterized",
        "name": "parameterized",
        "color": "0052cc",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-04-12T08:00:51Z",
    "updated_at": "2021-08-18T17:07:36Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "When I have a test with \r\n\r\n`@Parameterized.Parameters(name = \"{1} : {0}\")`\r\n\r\nIf I try to rerun failed tests in Intellij Idea, then I get:\r\n```\r\njava.lang.Exception: No tests found matching Tests from org.junit.runner.Request$1@5ae50ce6\r\n\r\n\tat org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:40)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n\r\n```\r\n\r\nIf I leave the @Parameterized.Parameters without name it works, any idea?\r\n\r\nFound a Junit5 related issue, https://github.com/junit-team/junit5/issues/1386\r\n\r\nJunit version 4.12, can this be related or should I open another issue?",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1604/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1600",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1600/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1600/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1600/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1600",
    "id": 425898484,
    "node_id": "MDU6SXNzdWU0MjU4OTg0ODQ=",
    "number": 1600,
    "title": "Cartesian product of base and derived class parameter ",
    "user": {
      "login": "noviceamateur",
      "id": 36193793,
      "node_id": "MDQ6VXNlcjM2MTkzNzkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/36193793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/noviceamateur",
      "html_url": "https://github.com/noviceamateur",
      "followers_url": "https://api.github.com/users/noviceamateur/followers",
      "following_url": "https://api.github.com/users/noviceamateur/following{/other_user}",
      "gists_url": "https://api.github.com/users/noviceamateur/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/noviceamateur/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/noviceamateur/subscriptions",
      "organizations_url": "https://api.github.com/users/noviceamateur/orgs",
      "repos_url": "https://api.github.com/users/noviceamateur/repos",
      "events_url": "https://api.github.com/users/noviceamateur/events{/privacy}",
      "received_events_url": "https://api.github.com/users/noviceamateur/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [
      {
        "id": 80119535,
        "node_id": "MDU6TGFiZWw4MDExOTUzNQ==",
        "url": "https://api.github.com/repos/junit-team/junit4/labels/parameterized",
        "name": "parameterized",
        "color": "0052cc",
        "default": false,
        "description": null
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-03-27T11:12:53Z",
    "updated_at": "2019-04-13T13:03:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "I have parameters in both the base and derived test classes. So I want the tests in derived class to run for the cartesian product of those.\r\n\r\nSample code -\r\n\r\n```\r\n@RunWith(Parameterized.class)\r\npublic class BaseTest {\r\n\r\n  public BaseTest() {\r\n  }\r\n\r\n  @BeforeClass\r\n  public static void setupbase() {\r\n  }\r\n\r\n  @Parameterized.Parameter(0)\r\n  public String baseParam;\r\n\r\n  @Parameterized.Parameters\r\n  public static Collection<Object[]> data() {\r\n    return Arrays.asList(new Object[][] {\r\n        { \"base1\" }, { \"base2\" }\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\npublic class Test1 extends BaseTest {\r\n\r\n  @BeforeClass\r\n  public static void setup() {\r\n  }\r\n\r\n  @Parameterized.Parameter(0)\r\n  public  String derivedParam;\r\n\r\n  @Parameterized.Parameters\r\n  public static Collection<Object[]> data() {\r\n    return Arrays.asList(new Object[][] {\r\n        { \"derived1\" }, { \"derived2\" }\r\n    });\r\n  }\r\n\r\n  @Test\r\n  public void testcase1() {\r\n    System.out.println(\"Base Param = \" + baseParam);\r\n    System.out.println(\"Derived Param = \" + derivedParam);\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n\r\nThe expected output - \r\n\r\n```\r\nBase Param = base1\r\nDerived Param = derived1\r\nBase Param = base1\r\nDerived Param = derived2\r\nBase Param = base2\r\nDerived Param = derived1\r\nBase Param = base2\r\nDerived Param = derived2\r\n```\r\n\r\n\r\nPresent error while running - \r\n\r\n```\r\n> java.lang.Exception: @Parameter(0) is used more than once (2).\r\n> \r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.validateFields(BlockJUnit4ClassRunnerWithParameters.java:119)\r\n> \tat org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(BlockJUnit4ClassRunner.java:129)\r\n> \tat org.junit.runners.ParentRunner.validate(ParentRunner.java:416)\r\n> \tat org.junit.runners.ParentRunner.<init>(ParentRunner.java:84)\r\n> \tat org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:65)\r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.<init>(BlockJUnit4ClassRunnerWithParameters.java:27)\r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory.createRunnerForTestWithParameters(BlockJUnit4ClassRunnerWithParametersFactory.java:16)\r\n> \tat org.junit.runners.Parameterized.createRunnersForParameters(Parameterized.java:313)\r\n> \tat org.junit.runners.Parameterized.<init>(Parameterized.java:248)\r\n> \tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n> \tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n> \tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n> \tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n> \tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\r\n> \tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n> \tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n> \tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\r\n> \tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n> \tat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\r\n> \tat org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:36)\r\n> \tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)\r\n> \tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n> \tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n> \tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n> \r\n> \r\n> java.lang.Exception: @Parameter(1) is never used.\r\n> \r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.validateFields(BlockJUnit4ClassRunnerWithParameters.java:116)\r\n> \tat org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(BlockJUnit4ClassRunner.java:129)\r\n> \tat org.junit.runners.ParentRunner.validate(ParentRunner.java:416)\r\n> \tat org.junit.runners.ParentRunner.<init>(ParentRunner.java:84)\r\n> \tat org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:65)\r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters.<init>(BlockJUnit4ClassRunnerWithParameters.java:27)\r\n> \tat org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory.createRunnerForTestWithParameters(BlockJUnit4ClassRunnerWithParametersFactory.java:16)\r\n> \tat org.junit.runners.Parameterized.createRunnersForParameters(Parameterized.java:313)\r\n> \tat org.junit.runners.Parameterized.<init>(Parameterized.java:248)\r\n> \tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n> \tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n> \tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n> \tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n> \tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\r\n> \tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n> \tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n> \tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\r\n> \tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n> \tat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\r\n> \tat org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:36)\r\n```\r\n\r\n\r\nVersion - Junit 4.12",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1600/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1587",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1587/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1587/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1587/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1587",
    "id": 399349477,
    "node_id": "MDU6SXNzdWUzOTkzNDk0Nzc=",
    "number": 1587,
    "title": "Problem executing remote Spock test due to java.lang.Exception failure",
    "user": {
      "login": "hellboy81",
      "id": 341600,
      "node_id": "MDQ6VXNlcjM0MTYwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/341600?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hellboy81",
      "html_url": "https://github.com/hellboy81",
      "followers_url": "https://api.github.com/users/hellboy81/followers",
      "following_url": "https://api.github.com/users/hellboy81/following{/other_user}",
      "gists_url": "https://api.github.com/users/hellboy81/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hellboy81/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hellboy81/subscriptions",
      "organizations_url": "https://api.github.com/users/hellboy81/orgs",
      "repos_url": "https://api.github.com/users/hellboy81/repos",
      "events_url": "https://api.github.com/users/hellboy81/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hellboy81/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-01-15T13:40:40Z",
    "updated_at": "2019-06-21T00:31:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "Trying to execute remote tests using JUnit 4.12 with Groovy&co steroids from IDEA:\r\n\r\n![image](https://user-images.githubusercontent.com/341600/51183675-3ef5b680-18d2-11e9-8749-559fb053d759.png)\r\n\r\n```java\r\n java.lang.Exception: No tests found matching method name filter from org.junit.runner.Request$1@3af039ed\r\n\r\n at org.junit.internal.requests.FilterRequest.getRunner(FilterRequest.java:40)\r\n at org.junit.runner.JUnitCore.run(JUnitCore.java:115)\r\n at org.junit.runner.JUnitCore$run$0.call(Unknown Source)\r\n at com.onresolve.scriptrunner.canned.common.admin.RunUnitTests.doScript(RunUnitTests.groovy:320)\r\n\r\n```\r\n\r\nSee [also](https://community.atlassian.com/t5/Adaptavist-questions/Scriptrunner-remote-Spock-test-failing-due-to-java-lang/qaq-p/740603)\r\n\r\nIssue can be reproduces also by another JUnit users on this [repo](https://bitbucket.org/Adaptavist/scriptrunner-samples/src/master/)\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1587/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1587/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1585",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1585/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1585/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1585/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1585",
    "id": 396945788,
    "node_id": "MDU6SXNzdWUzOTY5NDU3ODg=",
    "number": 1585,
    "title": "\"latest\" Javadoc folder should not contain beta documentation",
    "user": {
      "login": "sbrannen",
      "id": 104798,
      "node_id": "MDQ6VXNlcjEwNDc5OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104798?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sbrannen",
      "html_url": "https://github.com/sbrannen",
      "followers_url": "https://api.github.com/users/sbrannen/followers",
      "following_url": "https://api.github.com/users/sbrannen/following{/other_user}",
      "gists_url": "https://api.github.com/users/sbrannen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sbrannen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sbrannen/subscriptions",
      "organizations_url": "https://api.github.com/users/sbrannen/orgs",
      "repos_url": "https://api.github.com/users/sbrannen/repos",
      "events_url": "https://api.github.com/users/sbrannen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sbrannen/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-01-08T15:02:58Z",
    "updated_at": "2022-11-15T05:11:28Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "## Status Quo\r\n\r\nThe https://junit.org/junit4/javadoc/latest/ folder currently contains documentation for `JUnit 4.13-beta-1`.\r\n\r\nThe net result is that projects that link to https://junit.org/junit4/javadoc/latest/ in order to generate links to external documentation will currently link to *beta* software APIs instead of the latest release.\r\n\r\n## Expectation\r\n\r\n- The \"latest\" folder should point to the latest GA release, which is currently `JUnit 4.12`.\r\n- Documentation for beta releases should be published to a different folder -- for example, https://junit.org/junit4/javadoc/beta/, https://junit.org/junit4/javadoc/4.13-beta-1/, etc.\r\n\r\n",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1585/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1585/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1545",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1545/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1545/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1545/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1545",
    "id": 345341104,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjA0NTIwMjMx",
    "number": 1545,
    "title": "fixes issue #1432 about asserting charSequence equal",
    "user": {
      "login": "spector5",
      "id": 10501245,
      "node_id": "MDQ6VXNlcjEwNTAxMjQ1",
      "avatar_url": "https://avatars.githubusercontent.com/u/10501245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/spector5",
      "html_url": "https://github.com/spector5",
      "followers_url": "https://api.github.com/users/spector5/followers",
      "following_url": "https://api.github.com/users/spector5/following{/other_user}",
      "gists_url": "https://api.github.com/users/spector5/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/spector5/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/spector5/subscriptions",
      "organizations_url": "https://api.github.com/users/spector5/orgs",
      "repos_url": "https://api.github.com/users/spector5/repos",
      "events_url": "https://api.github.com/users/spector5/events{/privacy}",
      "received_events_url": "https://api.github.com/users/spector5/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-07-27T19:28:50Z",
    "updated_at": "2020-06-21T17:05:32Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1545",
      "html_url": "https://github.com/junit-team/junit4/pull/1545",
      "diff_url": "https://github.com/junit-team/junit4/pull/1545.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1545.patch",
      "merged_at": null
    },
    "body": "adds assertContentsEqual for CharSequences",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1545/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1528",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1528/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1528/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1528/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1528",
    "id": 328239354,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTkxODMwMTE1",
    "number": 1528,
    "title": "Now tests with assumption violations are flagged with 'I'",
    "user": {
      "login": "JxJxJxMxNxS",
      "id": 38140857,
      "node_id": "MDQ6VXNlcjM4MTQwODU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/38140857?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JxJxJxMxNxS",
      "html_url": "https://github.com/JxJxJxMxNxS",
      "followers_url": "https://api.github.com/users/JxJxJxMxNxS/followers",
      "following_url": "https://api.github.com/users/JxJxJxMxNxS/following{/other_user}",
      "gists_url": "https://api.github.com/users/JxJxJxMxNxS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JxJxJxMxNxS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JxJxJxMxNxS/subscriptions",
      "organizations_url": "https://api.github.com/users/JxJxJxMxNxS/orgs",
      "repos_url": "https://api.github.com/users/JxJxJxMxNxS/repos",
      "events_url": "https://api.github.com/users/JxJxJxMxNxS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JxJxJxMxNxS/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-05-31T18:00:21Z",
    "updated_at": "2020-06-21T17:05:34Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1528",
      "html_url": "https://github.com/junit-team/junit4/pull/1528",
      "diff_url": "https://github.com/junit-team/junit4/pull/1528.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1528.patch",
      "merged_at": null
    },
    "body": "According to #1525 now the tests that has assumption violations are flagged with 'I' in the textUI output",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1528/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1528/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1525",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1525/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1525/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1525/events",
    "html_url": "https://github.com/junit-team/junit4/issues/1525",
    "id": 326813602,
    "node_id": "MDU6SXNzdWUzMjY4MTM2MDI=",
    "number": 1525,
    "title": "Assumption violation is not reflected on text UI",
    "user": {
      "login": "davido",
      "id": 347173,
      "node_id": "MDQ6VXNlcjM0NzE3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/347173?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davido",
      "html_url": "https://github.com/davido",
      "followers_url": "https://api.github.com/users/davido/followers",
      "following_url": "https://api.github.com/users/davido/following{/other_user}",
      "gists_url": "https://api.github.com/users/davido/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davido/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davido/subscriptions",
      "organizations_url": "https://api.github.com/users/davido/orgs",
      "repos_url": "https://api.github.com/users/davido/repos",
      "events_url": "https://api.github.com/users/davido/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davido/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 18,
    "created_at": "2018-05-27T12:45:22Z",
    "updated_at": "2018-06-02T09:38:21Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "sub_issues_summary": {
      "total": 0,
      "completed": 0,
      "percent_completed": 0
    },
    "body": "It would be helpful if assumption violations would be reflected on the text UI. For this test class with three test methods:\r\n\r\n```java\r\npackage org.gerritcon.mv2016;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.junit.Assume.assumeTrue;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class PrintyTest {\r\n  @Test\r\n  public void test_passed() {\r\n    assertEquals(\"foo\", \"foo\");\r\n  }\r\n\r\n  @Test\r\n  public void test_failed() {\r\n    assertEquals(\"foo\", \"bar\");\r\n  }\r\n\r\n  @Test\r\n  public void test_assumption_violation() {\r\n    assumeTrue(false);\r\n  }\r\n}\r\n```\r\n\r\nJUnit text UI produces this result:\r\n\r\n```\r\n$ java -classpath buck-out/gen/lib__printy_tests#testsjar__output/printy_tests#testsjar.jar:/home/davido/Downloads/hamcrest-core-1.3.jar:/home/davido/Downloads/junit-4.12.jar org.junit.runner.JUnitCore org.gerritcon.mv2016.PrintyTest\r\nJUnit version 4.12\r\n..E.\r\nTime: 0.008\r\nThere was 1 failure:\r\n1) test_failed(org.gerritcon.mv2016.PrintyTest)\r\norg.junit.ComparisonFailure: expected:<[foo]> but was:<[bar]>\r\n\tat org.junit.Assert.assertEquals(Assert.java:115)\r\n[...]\r\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\r\n\r\nFAILURES!!!\r\nTests run: 3,  Failures: 1\r\n```\r\n\r\nThe impression is that 2 tests were successful even though, only single test was successful and another one failed with assumption violation. This information is lost.\r\n \r\nCompared to it the output from [Buck build tool](https://buckbuild.com/) is:\r\n\r\n```\r\n$ buck test :printy_tests\r\nFAILURE org.gerritcon.mv2016.PrintyTest test_failed: expected:<[foo]> but was:<[bar]>\r\n[-] PROCESSING BUCK FILES...FINISHED 0.0s 🏖  (Watchman reported no changes)\r\n[-] DOWNLOADING... (0.00 B/S AVG, TOTAL: 0.00 B, 0 Artifacts)\r\n[-] BUILDING...FINISHED 0.0s [100%] (6/6 JOBS, 0 UPDATED, 0 [0.0%] CACHE MISS)\r\n[-] TESTING...FINISHED 0.3s (1 PASS/1 SKIP/1 FAIL)\r\nRESULTS FOR //:printy_tests\r\nFAIL    <100ms  1 Passed   1 Skipped   1 Failed   org.gerritcon.mv2016.PrintyTest\r\nFAILURE org.gerritcon.mv2016.PrintyTest test_failed: expected:<[foo]> but was:<[bar]>\r\norg.junit.ComparisonFailure: expected:<[foo]> but was:<[bar]>\r\n\tat org.junit.Assert.assertEquals(Assert.java:115)\r\n[...]\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n\r\nTESTS FAILED: 1 FAILURE\r\nFailed target: //:printy_tests\r\n```\r\n\r\nThis line reflects more accurately what happened:\r\n\r\n```\r\nFAIL    <100ms  1 Passed   1 Skipped   1 Failed   org.gerritcon.mv2016.PrintyTest\r\n```\r\n\r\nYou may wonder, why would I care to improve text JUnit UI; in the end devs are using dedicated build tools and IDE integrations and not `java -classpath sut.jar:junit.jar org.junit.runner.JUnitCore <test class>`?\r\n\r\nIt turns out, that other build tools rely on JUnit text UI to report test outcome. Given that assumption violation is lost here, the other build tools also cannot offer more accurate test outcome.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1525/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1523",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1523/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1523/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1523/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1523",
    "id": 325996406,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTkwMTkzMjkz",
    "number": 1523,
    "title": "Fix assertSame to match semantics of == for primitive types",
    "user": {
      "login": "gb96",
      "id": 526473,
      "node_id": "MDQ6VXNlcjUyNjQ3Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/526473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gb96",
      "html_url": "https://github.com/gb96",
      "followers_url": "https://api.github.com/users/gb96/followers",
      "following_url": "https://api.github.com/users/gb96/following{/other_user}",
      "gists_url": "https://api.github.com/users/gb96/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gb96/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gb96/subscriptions",
      "organizations_url": "https://api.github.com/users/gb96/orgs",
      "repos_url": "https://api.github.com/users/gb96/repos",
      "events_url": "https://api.github.com/users/gb96/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gb96/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-05-24T07:28:49Z",
    "updated_at": "2020-07-27T04:04:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1523",
      "html_url": "https://github.com/junit-team/junit4/pull/1523",
      "diff_url": "https://github.com/junit-team/junit4/pull/1523.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1523.patch",
      "merged_at": null
    },
    "body": "This PR attempts to address some potentially unexpected behaviour of assertSame() when passed primitive expected and actual arguments.\r\n\r\nCurrently:\r\n\r\n1. assertSame(123, 123) passes because the although the primitive int arguments are boxed into Integer, most implementations of JVM cache the boxed Integers for values of 0 through 127.\r\n2. assertSame(130, 130) fails because the primitive int arguments are boxed into 2 distinct instances of Integer.\r\n3. assertSame(true, true) and assertSame(false, false) both pass but only because JVM implementations typically box boolean values to the same 2 constant instances Boolean.TRUE and Boolean.FALSE.\r\n4. assertSame() for the other primitive types (char, byte, short, long, float and double) will likewise succeed or fail on the basis of whether the JVM boxing implementation decides to resolve the two arguments to the same reference or not.\r\n\r\nAlthough some might argue that developers simply avoid using assertSame() with primitive types, plenty of API returns primitive values, and if assertSame() is used then the principle of \"least surprise\" should apply.\r\n\r\nThe solution implemented in this PR follows the rationale that:\r\n\r\n- assertEquals(a, b) should correspond to the semantics of a.equals(b) for distinct objects or boxed primitives, with the addition of corner cases for one or both arguments being null\r\n- assertSame(a, b) should correspond to the semantics of a == b for both Objects and primitive values.\r\n\r\nI initially considered whether assertSame(a, b) might correspond to the (JavaScript / ECMA) semantics of a === b, (i.e. both type and value the same) however that would be quite laborious to implement due to implicit Method Invocation Conversions.\r\n\r\nI have implemented new assertSame() functions with signatures taking boolean, long, and double primitive arguments. The aforementioned implicit Method Invocation Conversions take care of the remaining primitive types.\r\n\r\nI realize the new assertSame(boolean, boolean) is redundant owing to the fact that assertSame(Object, Object) happens to work as expected for boxed boolean values, however it is there for consistency.  If all other primitive types are spared auto-boxing when passed to assertSame() why should boolean be left out?",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1523/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  },
  {
    "url": "https://api.github.com/repos/junit-team/junit4/issues/1512",
    "repository_url": "https://api.github.com/repos/junit-team/junit4",
    "labels_url": "https://api.github.com/repos/junit-team/junit4/issues/1512/labels{/name}",
    "comments_url": "https://api.github.com/repos/junit-team/junit4/issues/1512/comments",
    "events_url": "https://api.github.com/repos/junit-team/junit4/issues/1512/events",
    "html_url": "https://github.com/junit-team/junit4/pull/1512",
    "id": 307931732,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTc2OTk1NDAx",
    "number": 1512,
    "title": "Add global TestRules",
    "user": {
      "login": "Unlimity",
      "id": 10413107,
      "node_id": "MDQ6VXNlcjEwNDEzMTA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10413107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Unlimity",
      "html_url": "https://github.com/Unlimity",
      "followers_url": "https://api.github.com/users/Unlimity/followers",
      "following_url": "https://api.github.com/users/Unlimity/following{/other_user}",
      "gists_url": "https://api.github.com/users/Unlimity/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Unlimity/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Unlimity/subscriptions",
      "organizations_url": "https://api.github.com/users/Unlimity/orgs",
      "repos_url": "https://api.github.com/users/Unlimity/repos",
      "events_url": "https://api.github.com/users/Unlimity/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Unlimity/received_events",
      "type": "User",
      "user_view_type": "public",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-03-23T07:51:56Z",
    "updated_at": "2020-06-21T17:05:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "type": null,
    "active_lock_reason": null,
    "draft": false,
    "pull_request": {
      "url": "https://api.github.com/repos/junit-team/junit4/pulls/1512",
      "html_url": "https://github.com/junit-team/junit4/pull/1512",
      "diff_url": "https://github.com/junit-team/junit4/pull/1512.diff",
      "patch_url": "https://github.com/junit-team/junit4/pull/1512.patch",
      "merged_at": null
    },
    "body": "This PR is one of the possible solutions to #1219\r\nWe also had a need for such a feature, so I just implemented it.\r\nI hope someone will find it useful.\r\nThis is my first PR to the big open source project, so any comments and advices are welcome.",
    "closed_by": null,
    "reactions": {
      "url": "https://api.github.com/repos/junit-team/junit4/issues/1512/reactions",
      "total_count": 8,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 3,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/junit-team/junit4/issues/1512/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]
