// Mocks generated by Mockito 5.4.6 from annotations
// in gh_repo_search/test/tests/ui/screens/repo_list/repo_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:gh_repo_search/api/repositories/git_repo_repository.dart'
    as _i3;
import 'package:gh_repo_search/domain/models/git_repo_issue_model.dart' as _i6;
import 'package:gh_repo_search/domain/models/git_repo_model.dart' as _i5;
import 'package:gh_repo_search/domain/models/list_info.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeListInfo_0 extends _i1.SmartFake implements _i2.ListInfo {
  _FakeListInfo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GitRepoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGitRepoRepository extends _i1.Mock implements _i3.GitRepoRepository {
  MockGitRepoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<(_i2.ListInfo, List<_i5.GitRepoSMModel>)> getList({
    required String? query,
    required int? page,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getList, [], {#query: query, #page: page}),
            returnValue:
                _i4.Future<(_i2.ListInfo, List<_i5.GitRepoSMModel>)>.value((
                  _FakeListInfo_0(
                    this,
                    Invocation.method(#getList, [], {
                      #query: query,
                      #page: page,
                    }),
                  ),
                  <_i5.GitRepoSMModel>[],
                )),
          )
          as _i4.Future<(_i2.ListInfo, List<_i5.GitRepoSMModel>)>);

  @override
  _i4.Future<List<_i5.GitRepoSMModel>> getListPage({
    required String? query,
    required int? page,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getListPage, [], {#query: query, #page: page}),
            returnValue: _i4.Future<List<_i5.GitRepoSMModel>>.value(
              <_i5.GitRepoSMModel>[],
            ),
          )
          as _i4.Future<List<_i5.GitRepoSMModel>>);

  @override
  _i4.Future<_i5.GitRepoModel?> getSingle({required String? fullName}) =>
      (super.noSuchMethod(
            Invocation.method(#getSingle, [], {#fullName: fullName}),
            returnValue: _i4.Future<_i5.GitRepoModel?>.value(),
          )
          as _i4.Future<_i5.GitRepoModel?>);

  @override
  _i4.Future<List<_i6.GitRepoIssueModel>> getIssues({
    required String? fullName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getIssues, [], {#fullName: fullName}),
            returnValue: _i4.Future<List<_i6.GitRepoIssueModel>>.value(
              <_i6.GitRepoIssueModel>[],
            ),
          )
          as _i4.Future<List<_i6.GitRepoIssueModel>>);
}
